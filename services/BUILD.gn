# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

if (!defined(global_parts_info) ||
    defined(global_parts_info.account_os_account)) {
  has_os_account_part = true
} else {
  has_os_account_part = false
}

ohos_shared_library("userauthservice") {
  include_dirs = [
    "//base/user_iam/user_auth/services/user_auth/inc",
    "//base/user_iam/user_auth/services/co_auth/inc",
    "//base/user_iam/user_auth/services/co_auth/common/interface",
    "//base/user_iam/user_auth/common/logs/user_idm",
    "//base/user_iam/user_auth/services/user_idm/inc",
    "//base/user_iam/user_auth/frameworks/user_idm/inc",
    "//base/user_iam/user_auth/interfaces/inner_api/user_idm",
  ]

  sources = [
    "co_auth/src/auth_res_manager.cpp",
    "co_auth/src/auth_res_pool.cpp",
    "co_auth/src/call_monitor.cpp",
    "co_auth/src/coauth_manager.cpp",
    "co_auth/src/coauth_service.cpp",
    "co_auth/src/coauth_stub.cpp",
    "co_auth/src/coauth_thread_pool.cpp",
    "co_auth/src/executor_messenger.cpp",
    "user_auth/src/userauth_adapter.cpp",
    "user_auth/src/userauth_async_proxy.cpp",
    "user_auth/src/userauth_controller.cpp",
    "user_auth/src/userauth_datamgr.cpp",
    "user_auth/src/userauth_excallback_impl.cpp",
    "user_auth/src/userauth_service.cpp",
    "user_auth/src/userauth_stub.cpp",
    "user_idm/src/useridm_adapter.cpp",
    "user_idm/src/useridm_callback_proxy.cpp",
    "user_idm/src/useridm_coauth_handler.cpp",
    "user_idm/src/useridm_controller.cpp",
    "user_idm/src/useridm_getinfo_callback_proxy.cpp",
    "user_idm/src/useridm_getsecinfo_callback_proxy.cpp",
    "user_idm/src/useridm_module.cpp",
    "user_idm/src/useridm_service.cpp",
    "user_idm/src/useridm_setprop_handler.cpp",
    "user_idm/src/useridm_stub.cpp",
  ]

  deps = [
    "//base/user_iam/user_auth/common:iam_thread_pool",
    "//base/user_iam/user_auth/frameworks/co_auth:coauth_framework",
    "//base/user_iam/user_auth/frameworks/user_auth:userauth_framework",
    "//base/user_iam/user_auth/frameworks/user_idm:useridm_framework",
    "//base/user_iam/user_auth/services/co_auth/common:useriam_common_lib",
    "//third_party/openssl:libcrypto_shared",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "eventhandler:libeventhandler",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr_standard:samgr_proxy",
    "startup_l2:syspara",
    "utils_base:utils",
  ]

  if (has_os_account_part) {
    cflags_cc = [ "-DHAS_OS_ACCOUNT_PART" ]
    external_deps += [ "os_account:os_account_innerkits" ]
  }

  configs = [ "//base/user_iam/user_auth/common:iam_log_config" ]

  remove_configs = [ "//build/config/compiler:no_exceptions" ]

  part_name = "user_auth"
  subsystem_name = "useriam"
}
